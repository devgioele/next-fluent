function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}import"intl-pluralrules";import React from"react";import{LocalizationProvider,ReactLocalization}from"@fluent/react";import hoistNonReactStatics from"hoist-non-react-statics";import{FluentBundle,FluentResource}from"@fluent/bundle";import*as cheerio from"cheerio";function*lazilyParsedBundles(fetchedMessages){for(const[locale,messages]of fetchedMessages){const resource=new FluentResource(messages);const bundle=new FluentBundle(locale);bundle.addResource(resource);yield bundle}}const toNodeName=element=>{switch(element.nodeType){case 1:return{name:element.name.toUpperCase(),data:element.type==="directive"?undefined:element.children.reduce((prev,curr)=>curr.nodeType===3?prev+curr.data:prev,"")};case 4:return{name:"#cdata-section"};case 8:return{name:"#comment"};case 9:return{name:"#document"};case 3:default:return{name:"#text",data:element.data}}};const parseMarkup=str=>{const $=cheerio.load(str);const nodes=$("body").contents().toArray().map(element=>{const{name,data}=toNodeName(element);return{nodeName:name,textContent:data}});return nodes};export const appWithLocalization=WrappedComponent=>{const AppWithTranslation=props=>{const{l10nMessages}=props.pageProps;const bundles=lazilyParsedBundles(l10nMessages);const l10n=new ReactLocalization(bundles,parseMarkup);return l10n?React.createElement(LocalizationProvider,{l10n:l10n},React.createElement(WrappedComponent,_extends({},props))):React.createElement(WrappedComponent,_extends({},props))};return hoistNonReactStatics(AppWithTranslation,WrappedComponent)};